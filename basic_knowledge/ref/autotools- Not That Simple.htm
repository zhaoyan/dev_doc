<!DOCTYPE html>
<!-- saved from url=(0049)https://blog.hljin.net/2014/10/10/autotools-play/ -->
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="google-site-verification" content="xBT4GhYoi5qRD5tr338pgPM5OWHHIDR6mNg1a3euekI">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="OK">
    <meta name="keyword" content="">
    <link rel="shortcut icon" href="https://blog.hljin.net/img/favicon.ico">

    <title>autotools折腾记 - Not That Simple</title>

    <link rel="canonical" href="https://blog.hljin.net/2014/10/10/autotools-play/">

    <!-- Bootstrap Core CSS -->
    <style class="anchorjs"></style><link rel="stylesheet" href="./autotools- Not That Simple_files/bootstrap.min.css">

    <!-- Custom CSS -->
    <link rel="stylesheet" href="./autotools- Not That Simple_files/hux-blog.min.css">

    <!-- Pygments Github CSS -->
    <link rel="stylesheet" href="./autotools- Not That Simple_files/syntax.css">

    <!-- Custom Fonts -->
    <!-- <link href="http://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css" rel="stylesheet" type="text/css"> -->
    <!-- Hux change font-awesome CDN to qiniu -->
    <link href="./autotools- Not That Simple_files/font-awesome.min.css" rel="stylesheet" type="text/css">


    <!-- Hux Delete, sad but pending in China
    <link href='http://fonts.googleapis.com/css?family=Lora:400,700,400italic,700italic' rel='stylesheet' type='text/css'>
    <link href='http://fonts.googleapis.com/css?family=Open+Sans:300italic,400italic,600italic,700italic,800italic,400,300,600,700,800' rel='stylesheet' type='text/
    css'>
    -->


    <!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
    <!--[if lt IE 9]>
        <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
        <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
    <![endif]-->

    <!-- ga & ba script hoook -->
    <script src="./autotools- Not That Simple_files/jquery.nav.js"></script><script src="./autotools- Not That Simple_files/fastclick.min.js"></script><script src="./autotools- Not That Simple_files/anchor.min.js"></script><script></script>
<script type="text/javascript" async="" src="./autotools- Not That Simple_files/embed.js"></script><link rel="preload" as="style" href="https://c.disquscdn.com/next/embed/styles/lounge.1338080c7d626298e3eb715cb658042e.css"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/common.bundle.94805df7d922d8c7efc1170776463a6c.js"><link rel="preload" as="script" href="https://c.disquscdn.com/next/embed/lounge.bundle.9c5e9911b88094ee43deca4e32c55daf.js"><link rel="preload" as="script" href="https://disqus.com/next/config.js"><script src="./autotools- Not That Simple_files/alfie.f51946af45e0b561c60f768335c9eb79.js" async="" charset="UTF-8"></script></head>


<!-- hack iOS CSS :active style -->
<body ontouchstart="">

    <!-- Navigation -->
<nav class="navbar navbar-default navbar-custom navbar-fixed-top is-fixed">
    <div class="container-fluid">
        <!-- Brand and toggle get grouped for better mobile display -->
        <div class="navbar-header page-scroll">
            <button type="button" class="navbar-toggle">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <a class="navbar-brand" href="https://blog.hljin.net/">Not That Simple</a>
        </div>

        <!-- Collect the nav links, forms, and other content for toggling -->
        <div id="huxblog_navbar">
            <div class="navbar-collapse">
                <ul class="nav navbar-nav navbar-right">
                    <li>
                        <a href="https://blog.hljin.net/">Home</a>
                    </li>
                    
                    <li>
                        <a href="https://blog.hljin.net/tags/">Tags</a>
                    </li>
                    
                </ul>
            </div>
        </div>
        <!-- /.navbar-collapse -->
    </div>
    <!-- /.container -->
</nav>
<script>
    // Drop Bootstarp low-performance Navbar
    // Use customize navbar with high-quality material design animation
    // in high-perf jank-free CSS3 implementation
    var $body   = document.body;
    var $toggle = document.querySelector('.navbar-toggle');
    var $navbar = document.querySelector('#huxblog_navbar');
    var $collapse = document.querySelector('.navbar-collapse');

    var __HuxNav__ = {
        close: function(){
            $navbar.className = " ";
            // wait until animation end.
            setTimeout(function(){
                // prevent frequently toggle
                if($navbar.className.indexOf('in') < 0) {
                    $collapse.style.height = "0px"
                }
            },400)
        },
        open: function(){
            $collapse.style.height = "auto"
            $navbar.className += " in";
        }
    }

    // Bind Event
    $toggle.addEventListener('click', function(e){
        if ($navbar.className.indexOf('in') > 0) {
            __HuxNav__.close()
        }else{
            __HuxNav__.open()
        }
    })

    /**
     * Since Fastclick is used to delegate 'touchstart' globally
     * to hack 300ms delay in iOS by performing a fake 'click',
     * Using 'e.stopPropagation' to stop 'touchstart' event from 
     * $toggle/$collapse will break global delegation.
     * 
     * Instead, we use a 'e.target' filter to prevent handler
     * added to document close HuxNav.  
     *
     * Also, we use 'click' instead of 'touchstart' as compromise
     */
    document.addEventListener('click', function(e){
        if(e.target == $toggle) return;
        if(e.target.className == 'icon-bar') return;
        __HuxNav__.close();
    })
</script>


    <!-- Image to hack wechat -->
<!-- <img src="/img/icon_wechat.png" width="0" height="0"> -->
<!-- <img src="/img/home-bg.jpg" width="0" height="0"> -->

<!-- Post Header -->


<style type="text/css">
    header.intro-header{
        position: relative;
        background-image: url('/img/home-bg.jpg')
    }

    
</style>
<header class="intro-header">
    <div class="header-mask"></div>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <div class="post-heading">
                    <div class="tags">
                        
                        <a class="tag" href="https://blog.hljin.net/tags/#binutils" title="binutils">binutils</a>
                        
                    </div>
                    <h1 id="autotools-1">autotools折腾记</h1>
                    
                    
                    <h2 class="subheading" id=""></h2>
                    
                    <span class="meta">Posted by Alex King on October 10, 2014</span>
                </div>
            </div>
        </div>
    </div>
</header>
<!-- Post Content -->
<article>
    <div class="container">
        <div class="row">

    <!-- Post Container -->
            <div class="
                col-lg-8 col-lg-offset-2
                col-md-10 col-md-offset-1
                post-container">

				<p>又到了痛并快乐着的折腾时间，这次折腾的对象是autotools。话说很早以前我非常崇拜各种开源代码中的configure和makefile，当初傻傻地以为这都是做项目的人自己写出来的，对开源社区里的人各种膜拜啊，尼玛我看都看不懂不要说写了。后来才知道有autoconf这么个玩意可以自动生成这些脚本，自己当然也要写，但是没有那么夸张了。</p>

<p>但是这玩意学习成本真心不低啊，首先是中文资料少，我英语废看英文文档累得慌，再加上GNU的手册是字典式的不是教学式的，在零基础的情况下基本上是看不懂的。加上当时没什么动力，所以就没有研究下去了。</p>

<h2 id="section">需求来了<a class="anchorjs-link " href="https://blog.hljin.net/2014/10/10/autotools-play/#section" aria-label="Anchor link for: section" data-anchorjs-icon="#" style="opacity: 1; padding-left: 0.375em;"></a></h2>

<p>现在动力来了。老师前阵子跟我说现在手上的这个项目，我负责的部分代码要上交，反而是师兄那块技术性更强功能更核心的部分是作为演示的。要上交嘛，就要弄得好看点，正式点。于是我就想了，怎么个正式法？原来那种自己手写的挫的要死的makefile一看就很low，必须要文件夹下一大堆<code class="highlighter-rouge">configue.ac Makefile.am Makefile.in</code>之类高大上的文件，加上<code class="highlighter-rouge">./configure &amp;&amp; make &amp;&amp; make install</code>三步编译才能算得上正式嘛。所以就开始折腾autotools，本着需求第一的原则，搞这个东西我是不求甚解的，真的要完全搞明白，真的太复杂了，只能要用的时候找找资料，学一点，慢慢积累。所以我也真心佩服那些沉得下心，把这些东西都能吃透，样样都精通的大神。</p>

<p>OK，废话不多说，先介绍下需求和大致的环境。</p>

<ul>
  <li>代码用到了两个库，<code class="highlighter-rouge">libpcap</code>和<code class="highlighter-rouge">libdnet</code>，我向<code class="highlighter-rouge">libdnet</code>库中添加了一个函数以适应程序要求，所以configure的时候要能检查这个两个库以及新函数是否存在，不存在要报错。</li>
  <li>代码里用到了DEBUG宏，以DEBUG的值作为调试等级，configure同样要有配置调试级别的选项。</li>
  <li>因为种种原因，我自己实现了一个哈希表，但也将<code class="highlighter-rouge">glib</code>中的<code class="highlighter-rouge">GHashTable</code>适配到了代码里，通过一个宏作为开关，configure的时候要能正确处理宏的定义。</li>
</ul>

<p>就这三条，其实很简单，autotools的宏已经覆盖了这些功能。程序的目录结构如下：</p>

<div class="highlighter-rouge"><pre class="highlight"><code>--root              根目录
  |--include        头文件.h
  |--src            代码.c
</code></pre>
</div>

<h2 id="autotools">autotools工具和文件<a class="anchorjs-link " href="https://blog.hljin.net/2014/10/10/autotools-play/#autotools" aria-label="Anchor link for: autotools" data-anchorjs-icon="#" style="opacity: 1; padding-left: 0.375em;"></a></h2>
<p>这里的autotools其实指代了一系列工具，要使用autotools得先理清这些工具和它们生成的文件之间的关系。</p>

<ul>
  <li><code class="highlighter-rouge">autoconf</code>：通过<code class="highlighter-rouge">configure.ac</code>生成<code class="highlighter-rouge">configure</code>，<code class="highlighter-rouge">configure.ac</code>是整个流程中最重要的文件。</li>
  <li><code class="highlighter-rouge">autoheader</code>：通过<code class="highlighter-rouge">configure.ac</code>生成<code class="highlighter-rouge">config.h.in</code>，<code class="highlighter-rouge">config.h.in</code>是<code class="highlighter-rouge">config.h</code>的模板文件，<code class="highlighter-rouge">config.h</code>中包含了整个程序用到的宏定义。</li>
  <li><code class="highlighter-rouge">autoscan</code>：扫描源文件进行一些通用的移植配置和宏定义。</li>
  <li><code class="highlighter-rouge">autoreconf</code>：以正确的顺序自动运行各种工具，包括<code class="highlighter-rouge">autoconf</code>、<code class="highlighter-rouge">autoheader</code>、<code class="highlighter-rouge">automake</code>。</li>
  <li><code class="highlighter-rouge">automake</code>：通过<code class="highlighter-rouge">configure.ac</code>和<code class="highlighter-rouge">Makefile.in</code>生成<code class="highlighter-rouge">Makefile</code>。</li>
</ul>

<p>还有一些工具更加底层，像这种简单的程序用不到，简单介绍下：</p>

<ul>
  <li><code class="highlighter-rouge">autom4te</code>：是整个autotools工具链的核心，autoconf本质上是M4宏，<code class="highlighter-rouge">autom4te</code>则是宏处理器。大致上可以理解为类似于C语言编译前的预处理阶段。</li>
  <li><code class="highlighter-rouge">aclocal</code>：会生成<code class="highlighter-rouge">aclocal.m4</code>，包含各种自定义的宏。</li>
</ul>

<p>实际上，由于我的需求足够简单，在编写完必须的<code class="highlighter-rouge">configure.ac</code>、<code class="highlighter-rouge">Makefile.am</code>、<code class="highlighter-rouge">src/Makefile.am</code>后，只需要执行以下一条命令，就可以生成所有需要的文件了：</p>

<div class="highlighter-rouge"><pre class="highlight"><code>autoreconf --install
</code></pre>
</div>

<p>这就把我从这些复杂的工具中解放了出来，可以专注于核心文件<code class="highlighter-rouge">configure.ac</code>的编写。</p>

<h2 id="configureac">编写configure.ac文件<a class="anchorjs-link " href="https://blog.hljin.net/2014/10/10/autotools-play/#configureac" aria-label="Anchor link for: configureac" data-anchorjs-icon="#" style="opacity: 1; padding-left: 0.375em;"></a></h2>
<p><code class="highlighter-rouge">configure.ac</code>由一系列的宏组成，经过<code class="highlighter-rouge">autoconf</code>扩展。这些宏的名字都有约定俗成的规范，比如<code class="highlighter-rouge">AC_</code>开头的表明是<code class="highlighter-rouge">autoconf</code>宏，主要用于生成<code class="highlighter-rouge">configure</code>文件，<code class="highlighter-rouge">AM_</code>开头的表明是<code class="highlighter-rouge">automake</code>宏，主要在配合<code class="highlighter-rouge">Makefile.am</code>生成<code class="highlighter-rouge">Makefile.in</code>时有效。这里我只介绍会用到的宏。宏里作为参数的部分会用<code class="highlighter-rouge">[]</code>括起来，这是为了保护参数字符串不被宏处理器继续展开，是M4宏的特性，这里不多做介绍了。</p>

<div class="highlighter-rouge"><pre class="highlight"><code>AC_INIT<span class="o">([</span>convertor],[0.1]<span class="o">)</span>
</code></pre>
</div>

<p>初始化<code class="highlighter-rouge">autoconf</code>，参数是软件名字和版本号，还有一个参数是用于汇报bug的Email地址，我没有提供。这里提供的信息会被写入到<code class="highlighter-rouge">config.h.in</code>中的<code class="highlighter-rouge">PACKAGE_xxx</code>宏中。</p>

<div class="highlighter-rouge"><pre class="highlight"><code>AM_INIT_AUTOMAKE<span class="o">([</span>foreign]<span class="o">)</span>
</code></pre>
</div>

<p>这句用于初始化<code class="highlighter-rouge">automake</code>，<code class="highlighter-rouge">autoconf</code>本身是可以单独使用的，但要生成<code class="highlighter-rouge">Makefile</code>必须要配合<code class="highlighter-rouge">automake</code>。这里需要说明的是网上的很多资料里这个宏的参数有三个，与之前的<code class="highlighter-rouge">AC_INIT</code>参数相同，这是过期的版本，新版本已经不适用了。传入<code class="highlighter-rouge">foreign</code>的意思是启用foreign模式，工作在GNU模式下的<code class="highlighter-rouge">automake</code>会要求诸如<code class="highlighter-rouge">NEWS</code>、<code class="highlighter-rouge">README</code>、<code class="highlighter-rouge">ChangeLog</code>这些文件，我没有写这些文件，所以要使用foreign模式取消检查。</p>

<div class="highlighter-rouge"><pre class="highlight"><code>AC_CONFIG_SRCDIR<span class="o">([</span>src/ip.c]<span class="o">)</span>
</code></pre>
</div>

<p>这个宏用于检查<code class="highlighter-rouge">configure</code>所在的位置是否正确，方法就是随便拿一个源文件来测试。</p>

<div class="highlighter-rouge"><pre class="highlight"><code>AC_PROG_CC
</code></pre>
</div>

<p>这个宏用于检查gcc程序，<code class="highlighter-rouge">AC_PROG_xxx</code>宏用于检查相应的工具是否存在并且工具正常。</p>

<div class="highlighter-rouge"><pre class="highlight"><code>AC_CHECK_LIB<span class="o">([</span>dnet], <span class="o">[</span>eth_send_iovec], <span class="o">[]</span>, <span class="o">[</span>AC_MSG_ERROR<span class="o">([</span>libdnet not found or patched.]<span class="o">)])</span>
AC_CHECK_LIB<span class="o">([</span>pcap], <span class="o">[</span>pcap_open_live], <span class="o">[]</span>, <span class="o">[</span>AC_MSG_ERROR<span class="o">([</span>libpcap not found.]<span class="o">)])</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">AC_CHECK_LIB</code>宏用于检查程序依赖的库是否存在，方法是检查库中的一个函数能否通过编译，函数名由第二个参数提供，第三个参数是检查成功时执行的代码，最后一个参数是检查失败时执行的代码。这里检查失败时调用<code class="highlighter-rouge">AC_MSG_ERROR</code>宏，也就是直接报错退出，相应的还有<code class="highlighter-rouge">AC_MSG_WARN</code>宏，只警告但会继续运行。由于使用一个函数名来检查库是否存在，所以我顺水推舟把我在<code class="highlighter-rouge">libdnet</code>中新加的函数作为参数提供了，直接就能满足第一个需求。</p>

<div class="highlighter-rouge"><pre class="highlight"><code>AC_ARG_ENABLE<span class="o">([</span>debug],
    <span class="o">[</span>AS_HELP_STRING<span class="o">([</span>--enable-debug[<span class="o">=</span>level]],[运行时打印调试信息（默认关闭）]<span class="o">)]</span>,
    <span class="o">[</span>
        <span class="k">if </span><span class="nb">test</span> <span class="s2">"x</span><span class="nv">$enableval</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"xyes"</span>; <span class="k">then
            </span>AC_DEFINE<span class="o">([</span>DEBUG],[2],[Define <span class="k">if</span> --enable-debug]<span class="o">)</span>
        <span class="k">elif </span><span class="nb">test</span> <span class="s2">"x</span><span class="nv">$enableval</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"x0"</span> ; <span class="k">then
            </span>AC_DEFINE<span class="o">([</span>DEBUG],[0],[Define <span class="k">if</span> --enable-debug]<span class="o">)</span>
        <span class="k">elif </span><span class="nb">test</span> <span class="s2">"x</span><span class="nv">$enableval</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"x1"</span> ; <span class="k">then
            </span>AC_DEFINE<span class="o">([</span>DEBUG],[1],[Define <span class="k">if</span> --enable-debug]<span class="o">)</span>
        <span class="k">elif </span><span class="nb">test</span> <span class="s2">"x</span><span class="nv">$enableval</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"x2"</span> ; <span class="k">then
            </span>AC_DEFINE<span class="o">([</span>DEBUG],[2],[Define <span class="k">if</span> --enable-debug]<span class="o">)</span>
        <span class="k">elif </span><span class="nb">test</span> <span class="s2">"x</span><span class="nv">$enableval</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"x3"</span> ; <span class="k">then
            </span>AC_DEFINE<span class="o">([</span>DEBUG],[3],[Define <span class="k">if</span> --enable-debug]<span class="o">)</span>
        <span class="k">else
            </span><span class="nb">echo</span> <span class="s2">"Error! Unknown DEBUG level"</span>
            <span class="nb">exit</span> -1
        <span class="k">fi</span>
    <span class="o">]</span>,
    <span class="o">[]</span>
<span class="o">)</span>
</code></pre>
</div>

<p>这一段为第二个需求服务。<code class="highlighter-rouge">AC_ARG_ENABLE</code>宏定义的项可以在运行<code class="highlighter-rouge">./configure</code>时加上<code class="highlighter-rouge">--enable-xxx[=value]</code>指定，共有四个参数，第一个是项的名字，第二个是帮助信息，可以通过<code class="highlighter-rouge">./configure --help</code>查看，第三个是配置时设置了该项时运行的脚本，第四个是没有设置该项时运行的脚本。需要注意的是无论是用<code class="highlighter-rouge">--enable-xxx</code>还是相应的<code class="highlighter-rouge">--disable-xxx</code>都会运行第三个选项的脚本，区别只是<code class="highlighter-rouge">$enableval</code>为<code class="highlighter-rouge">yes</code>和<code class="highlighter-rouge">no</code>，当然如果用<code class="highlighter-rouge">=val</code>设置了值，<code class="highlighter-rouge">$enableval</code>就会设为<code class="highlighter-rouge">val</code>。最后是<code class="highlighter-rouge">AC_DEFINE</code>宏，这个宏会将指定的值写入到<code class="highlighter-rouge">config.h.in</code>中，对应的格式是：<code class="highlighter-rouge">AC_DEFINE([name],[value],[note])</code>会转化为：</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="cm">/* note */</span>
<span class="cp">#define name value
</span></code></pre>
</div>

<div class="highlighter-rouge"><pre class="highlight"><code>AC_ARG_WITH<span class="o">([</span>glib],
    <span class="o">[</span>AS_HELP_STRING<span class="o">([</span>--with-glib], <span class="o">[</span>使用glib中的HashTable（默认关闭）]<span class="o">)]</span>,
    <span class="o">[</span>  
        <span class="k">if </span><span class="nb">test</span> <span class="s2">"x</span><span class="nv">$withval</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"xyes"</span>; <span class="k">then
            </span>AC_DEFINE<span class="o">([</span>_USING_GLIB_HASHTABLE],[1],[Define <span class="k">if</span> --with-glib]<span class="o">)</span>
            PKG_CHECK_MODULES<span class="o">([</span>GLIB], <span class="o">[</span>glib-2.0]<span class="o">)</span>
            <span class="nv">with_glib</span><span class="o">=</span><span class="s2">"yes"</span>
        <span class="k">fi</span>
    <span class="o">]</span>,
    <span class="o">[]</span>
<span class="o">)</span>
AM_CONDITIONAL<span class="o">([</span>USE_GLIB], <span class="o">[</span><span class="nb">test</span> <span class="s2">"x</span><span class="nv">$with_glib</span><span class="s2">"</span> <span class="o">=</span> <span class="s2">"xyes"</span><span class="o">])</span>
</code></pre>
</div>

<p>这一段为第三个需求服务。<code class="highlighter-rouge">AC_ARG_WITH</code>的功能和<code class="highlighter-rouge">AC_ARG_ENABLE</code>很像，是由<code class="highlighter-rouge">--with-xxx</code>指定的。参数功能也是一样。<code class="highlighter-rouge">PKG_CHECK_MODULES</code>宏用于调用<code class="highlighter-rouge">pkg-config</code>获取库的编译和链接选项，根据参数，执行的功能大致相当于以下两条命令：</p>

<div class="highlighter-rouge"><pre class="highlight"><code><span class="nv">GLIB_CFLAGS</span><span class="o">=</span><span class="sb">`</span>pkg-config --cflags glib-2.0<span class="sb">`</span>
<span class="nv">GLIB_LIBS</span><span class="o">=</span><span class="sb">`</span>pkg-config --libs glib-2.0<span class="sb">`</span>
</code></pre>
</div>

<p><code class="highlighter-rouge">GLIB_CFLAGS</code>和<code class="highlighter-rouge">GLIB_LIBS</code>这两个参数会在编写<code class="highlighter-rouge">Makefile.am</code>时用到。最后<code class="highlighter-rouge">AM_CONDITIONAL</code>用于设置条件变量，它会判断第二个参数提供的值是否为真，为真在第一个参数的值为<code class="highlighter-rouge">TRUE</code>，否则<code class="highlighter-rouge">FALSE</code>，这里定义的值同样是<code class="highlighter-rouge">Makefile.am</code>用到的。</p>

<div class="highlighter-rouge"><pre class="highlight"><code>AC_CONFIG_HEADERS<span class="o">([</span>config.h]<span class="o">)</span>
AC_CONFIG_FILES<span class="o">([</span>Makefile src/Makefile]<span class="o">)</span>
AC_OUTPUT
</code></pre>
</div>

<p>最后三句表明输出最终经过<code class="highlighter-rouge">./configure</code>之后生成的文件。注意每个子目录下都要有Makefile。至此这个<code class="highlighter-rouge">configure.ac</code>就完成了。</p>

<h2 id="makefileam">编写Makefile.am文件<a class="anchorjs-link " href="https://blog.hljin.net/2014/10/10/autotools-play/#makefileam" aria-label="Anchor link for: makefileam" data-anchorjs-icon="#" style="opacity: 1; padding-left: 0.375em;"></a></h2>
<p>我们一共要编写两个<code class="highlighter-rouge">Makefile.am</code>文件。第一个位于根目录下，很简单，就一句话：</p>

<div class="highlighter-rouge"><pre class="highlight"><code>SUBDIRS <span class="o">=</span> src
</code></pre>
</div>

<p>指定要递归进入的子目录。这里只有一项，当然可以指定许多项，空格隔开，且每个子目录下都要有<code class="highlighter-rouge">Makefile.am</code>文件。</p>

<p>第二个<code class="highlighter-rouge">Makefile.am</code>文件自然是在<code class="highlighter-rouge">src</code>文件夹下。</p>

<div class="highlighter-rouge"><pre class="highlight"><code>bin_PROGRAMS <span class="o">=</span> convertor
convertor_CFLAGS <span class="o">=</span> -std<span class="o">=</span>gnu99 -I<span class="k">$(</span>srcdir<span class="k">)</span>/../include -O
<span class="k">if </span>USE_GLIB
    convertor_CFLAGS +<span class="o">=</span> <span class="k">$(</span>GLIB_CFLAGS<span class="k">)</span>
endif
convertor_LDFLAGS <span class="o">=</span> -pthread
<span class="k">if </span>USE_GLIB
    convertor_LDADD <span class="o">=</span> <span class="k">$(</span>GLIB_LIBS<span class="k">)</span>
endif
<span class="c">#convertor_LDADD = -ldnet -lpcap</span>
convertor_SOURCES <span class="o">=</span> a.c b.c c.c
</code></pre>
</div>

<p>这段代码还是很简洁易懂的，需要说明的有几点：</p>

<ul>
  <li><code class="highlighter-rouge">bin_PROGRAMS</code>中的<code class="highlighter-rouge">bin</code>说明程序最终通过<code class="highlighter-rouge">make install</code>安装在<code class="highlighter-rouge">${exec_prefix}/bin</code>下。<code class="highlighter-rouge">${exec_prefix}</code>是<code class="highlighter-rouge">autoconf</code>预设的变量，默认值等于<code class="highlighter-rouge">${prefix}</code>，还有许多类似的项，如<code class="highlighter-rouge">lib</code>指明的会安装在<code class="highlighter-rouge">${exec_prefix}/lib</code>下，<code class="highlighter-rouge">noinst</code>则表明不安装。<code class="highlighter-rouge">PROGRAMS</code>则表明生成的可执行文件，类似的还有<code class="highlighter-rouge">LIBRARIES</code>表明库文件，<code class="highlighter-rouge">HEADERS</code>表明是头文件，等等，因为我这里用不到，也没有做其他的实验。</li>
  <li>通过第一项指定目标名字后，就可以通过<code class="highlighter-rouge">name_CFLAGS</code>、<code class="highlighter-rouge">name_LDFLAGS</code>、<code class="highlighter-rouge">name_SOURCES</code>等设置程序专属的变量，这些变量有的有相应的公共值由所有目标共享，例如<code class="highlighter-rouge">AM_CFALGS</code>、<code class="highlighter-rouge">AM_LDFLAGS</code>。</li>
  <li><code class="highlighter-rouge">LDADD</code>专门用于添加所需的库，由<code class="highlighter-rouge">LDADD</code>指定的库会被放在gcc链接命令最后，确保正确链接（如果写在<code class="highlighter-rouge">LDFLAGS</code>里会被写在gcc链接命令<code class="highlighter-rouge">.o</code>文件的前面导致无法正确链接），<code class="highlighter-rouge">LDADD</code>变量的公共版就叫<code class="highlighter-rouge">LDADD</code>，不用添加<code class="highlighter-rouge">AM_</code>前缀。另外，在<code class="highlighter-rouge">configure.ac</code>中通过<code class="highlighter-rouge">AC_CHECK_LIB</code>宏检测的库会自动添加到编译命令中，所以不需要单独设置，可以看到代码中那行被我注释了。</li>
  <li>这里也能看到<code class="highlighter-rouge">configure.ac</code>中指定的<code class="highlighter-rouge">USE_GLIB</code>、<code class="highlighter-rouge">GLIB_CFLAGS</code>、<code class="highlighter-rouge">GLIB_LIBS</code>的用法了，很清晰就不多说了。</li>
</ul>

<h2 id="section-1">参考资料<a class="anchorjs-link " href="https://blog.hljin.net/2014/10/10/autotools-play/#section-1" aria-label="Anchor link for: section 1" data-anchorjs-icon="#" style="opacity: 1; padding-left: 0.375em;"></a></h2>

<p>编写完两个文件就能使用<code class="highlighter-rouge">autoreconf --install</code>命令生成所需的所有文件了，然后就能像最常见的程序那样<code class="highlighter-rouge">./configure &amp;&amp; make &amp;&amp; make install</code>编译安装了。</p>

<p>最后给出我折腾过程中参考的资料。</p>

<ul>
  <li>首先是我感觉最有价值的入门材料，做成了PPT的样子，不过通过PDF发布，一共是162张PPT，不过他把每一步动画都分隔到了一页上导致PDF显示有556页，刚开始看的时候吓尿了，后来发现其实还好。我基本上就是根着这个PDF学习的。这是<a href="https://www.lrde.epita.fr/~adl/autotools.html">下载地址</a>。</li>
  <li><a href="http://www.gnu.org/software/autoconf/manual/autoconf.html">Autoconf Manual</a>总是逃不掉的。</li>
  <li><a href="http://dl.e-book-free.com/2013/07/autotools.pdf">《AUTOTOOLS: A PRACTITIONER’S GUIDE TO GNU AUTOCONF, AUTOMAKE, AND LIBTOOL》</a>，这个就比较狠了，是一本书，三百多页，当然也相对系统。</li>
  <li>网上各种博客，比如<a href="http://blog.csdn.net/scucj/article/details/6079052">这个</a>，不得不说autotools的中文资料很少，网上很多还是过期的，要想学习还得看英文，好痛苦。</li>
</ul>


                <hr>

                


                <ul class="pager">
                    
                    <li class="previous">
                        <a href="https://blog.hljin.net/2014/09/10/Cross-Compile-ARM-Native-GCC/" data-toggle="tooltip" data-placement="top" title="交叉编译ARM Native GCC">
                        Previous<br>
                        <span>交叉编译ARM Native GCC</span>
                        </a>
                    </li>
                    
                    
                    <li class="next">
                        <a href="https://blog.hljin.net/2014/10/20/compile-wireshark-under-windows/" data-toggle="tooltip" data-placement="top" title="Windows下编译Wireshark">
                        Next<br>
                        <span>Windows下编译Wireshark</span>
                        </a>
                    </li>
                    
                </ul>


                

                
                <!-- disqus 评论框 start -->
                <div class="comment">
                    <div id="disqus_thread" class="disqus-thread"><iframe id="dsq-app1" name="dsq-app1" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%" src="./autotools- Not That Simple_files/saved_resource.html" style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 320px !important;" horizontalscrolling="no" verticalscrolling="no"></iframe></div>
                </div>
                <!-- disqus 评论框 end -->
                

            </div>  

    <!-- Side Catalog Container -->
        
            <div class="
                col-lg-2 col-lg-offset-0
                visible-lg-block
                sidebar-container
                catalog-container">
                <div class="side-catalog fixed">
                    <hr class="hidden-sm hidden-xs">
                    <h5 id="catalog">
                        <a class="catalog-toggle" href="https://blog.hljin.net/2014/10/10/autotools-play/#">CATALOG</a>
                    </h5>
                    <ul class="catalog-body"><li class="h2_nav"><a href="https://blog.hljin.net/2014/10/10/autotools-play/#section" rel="nofollow">需求来了</a></li><li class="h2_nav"><a href="https://blog.hljin.net/2014/10/10/autotools-play/#autotools" rel="nofollow">autotools工具和文件</a></li><li class="h2_nav"><a href="https://blog.hljin.net/2014/10/10/autotools-play/#configureac" rel="nofollow">编写configure.ac文件</a></li><li class="h2_nav"><a href="https://blog.hljin.net/2014/10/10/autotools-play/#makefileam" rel="nofollow">编写Makefile.am文件</a></li><li class="h2_nav active"><a href="https://blog.hljin.net/2014/10/10/autotools-play/#section-1" rel="nofollow">参考资料</a></li></ul>
                </div>
            </div>
        

    <!-- Sidebar Container -->
            <div class="
                col-lg-8 col-lg-offset-2
                col-md-10 col-md-offset-1
                sidebar-container">

                <!-- Featured Tags -->
                
                <section>
                    <hr class="hidden-sm hidden-xs">
                    <h5 id="featured-tags"><a href="https://blog.hljin.net/tags/">FEATURED TAGS</a></h5>
                    <div class="tags">
        				
                            
                				<a href="https://blog.hljin.net/tags/#博客" title="博客" rel="3">
                                    博客
                                </a>
                            
        				
                            
                				<a href="https://blog.hljin.net/tags/#binutils" title="binutils" rel="2">
                                    binutils
                                </a>
                            
        				
                            
                				<a href="https://blog.hljin.net/tags/#Network" title="Network" rel="3">
                                    Network
                                </a>
                            
        				
                            
        				
                            
        				
                            
        				
        			</div>
                </section>
                

                <!-- Friends Blog -->
                
                <hr>
                <h5 id="friends">FRIENDS</h5>
                <ul class="list-inline">
                    
                        <li><a href="http://devopstarter.info/">Colstuwjx的博客</a></li>
                    
                </ul>
                
            </div>
        </div>
    </div>
</article>






<!-- disqus 公共JS代码 start (一个网页只需插入一次) -->
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES * * */
    var disqus_shortname = "core2duoe6420";
    var disqus_identifier = "/2014/10/10/autotools-play";
    var disqus_url = "https://blog.hljin.net/2014/10/10/autotools-play/";

    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
<!-- disqus 公共JS代码 end -->




<!-- async load function -->
<script>
    function async(u, c) {
      var d = document, t = 'script',
          o = d.createElement(t),
          s = d.getElementsByTagName(t)[0];
      o.src = u;
      if (c) { o.addEventListener('load', function (e) { c(null, e); }, false); }
      s.parentNode.insertBefore(o, s);
    }
</script>
<!-- anchor-js, Doc:http://bryanbraun.github.io/anchorjs/ -->
<script>
    async("//cdn.bootcss.com/anchor-js/1.1.1/anchor.min.js",function(){
        anchors.options = {
          visible: 'always',
          placement: 'right',
          icon: '#'
        };
        anchors.add().remove('.intro-header h1').remove('.subheading').remove('.sidebar-container h5');
    })
</script>
<style>
    /* place left on bigger screen */
    @media all and (min-width: 800px) {
        .anchorjs-link{
            position: absolute;
            left: -0.75em;
            font-size: 1.1em;
            margin-top : -0.1em;
        }
    }
</style>


    <!-- Footer -->
<footer>
    <div class="container">
        <div class="row">
            <div class="col-lg-8 col-lg-offset-2 col-md-10 col-md-offset-1">
                <ul class="list-inline text-center">
                    
                    

                    <!-- add Weibo, Zhihu by Hux, add target = "_blank" to <a> by Hux -->
                    
                    


                    
                    
                    <li>
                        <a target="_blank" href="https://github.com/core2duoe6420">
                            <span class="fa-stack fa-lg">
                                <i class="fa fa-circle fa-stack-2x"></i>
                                <i class="fa fa-github fa-stack-1x fa-inverse"></i>
                            </span>
                        </a>
                    </li>
                    
                </ul>
                <p class="copyright text-muted">
                    Copyright © Not That Simple 2017
                    <br>
                    Theme by <a href="http://huangxuan.me/">Hux</a> |
                    <iframe style="margin-left: 2px; margin-bottom:-5px;" frameborder="0" scrolling="0" width="91px" height="20px" src="./autotools- Not That Simple_files/github-btn.html">
                    </iframe>
                </p>
            </div>
        </div>
    </div>
</footer>

<!-- jQuery -->
<script src="./autotools- Not That Simple_files/jquery.min.js"></script>

<!-- Bootstrap Core JavaScript -->
<script src="./autotools- Not That Simple_files/bootstrap.min.js"></script>

<!-- Custom Theme JavaScript -->
<script src="./autotools- Not That Simple_files/hux-blog.min.js"></script>


<!-- async load function -->
<script>
    function async(u, c) {
      var d = document, t = 'script',
          o = d.createElement(t),
          s = d.getElementsByTagName(t)[0];
      o.src = u;
      if (c) { o.addEventListener('load', function (e) { c(null, e); }, false); }
      s.parentNode.insertBefore(o, s);
    }
</script>

<!-- 
     Because of the native support for backtick-style fenced code blocks 
     right within the Markdown is landed in Github Pages, 
     From V1.6, There is no need for Highlight.js, 
     so Huxblog drops it officially.

     - https://github.com/blog/2100-github-pages-now-faster-and-simpler-with-jekyll-3-0  
     - https://help.github.com/articles/creating-and-highlighting-code-blocks/ 
     - https://github.com/jneen/rouge/wiki/list-of-supported-languages-and-lexers   
-->
<!--
    <script>
        async("http://cdn.bootcss.com/highlight.js/8.6/highlight.min.js", function(){
            hljs.initHighlightingOnLoad();
        })
    </script>
    <link href="http://cdn.bootcss.com/highlight.js/8.6/styles/github.min.css" rel="stylesheet">
-->


<!-- jquery.tagcloud.js -->
<script>
    // only load tagcloud.js in tag.html
    if($('#tag_cloud').length !== 0){
        async("/js/jquery.tagcloud.js",function(){
            $.fn.tagcloud.defaults = {
                //size: {start: 1, end: 1, unit: 'em'},
                color: {start: '#bbbbee', end: '#0085a1'},
            };
            $('#tag_cloud a').tagcloud();
        })
    }
</script>

<!--fastClick.js -->
<script>
    async("//cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js", function(){
        var $nav = document.querySelector("nav");
        if($nav) FastClick.attach($nav);
    })
</script>


<!-- Google Analytics -->



<!-- Baidu Tongji -->




<!-- Side Catalog -->

<script type="text/javascript">
    function generateCatalog (selector) {
        var P = $('div.post-container'),a,n,t,l,i,c;
        a = P.find('h1,h2,h3,h4,h5,h6');
        a.each(function () {
            n = $(this).prop('tagName').toLowerCase();
            i = "#"+$(this).prop('id');
            t = $(this).text();
            c = $('<a href="'+i+'" rel="nofollow">'+t+'</a>');
            l = $('<li class="'+n+'_nav"></li>').append(c);
            $(selector).append(l);
        });
        return true;    
    }

    generateCatalog(".catalog-body");

    // toggle side catalog
    $(".catalog-toggle").click((function(e){
        e.preventDefault();
        $('.side-catalog').toggleClass("fold")
    }))

    /*
     * Doc: https://github.com/davist11/jQuery-One-Page-Nav
     * Fork by Hux to support padding
     */
    async("/js/jquery.nav.js", function () {
        $('.catalog-body').onePageNav({
            currentClass: "active",
            changeHash: !1,
            easing: "swing",
            filter: "",
            scrollSpeed: 700,
            scrollOffset: 0,
            scrollThreshold: .2,
            begin: null,
            end: null,
            scrollChange: null,
            padding: 80
        });
    });
</script>





<!-- Image to hack wechat -->
<img src="./autotools- Not That Simple_files/icon_wechat.png" width="0" height="0">
<!-- Migrate from head to bottom, no longer block render and still work -->




<iframe style="display: none;" src="./autotools- Not That Simple_files/saved_resource(2).html"></iframe></body></html>